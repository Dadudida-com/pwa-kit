/*
 * Copyright (c) 2023, Salesforce, Inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

const { program, Argument } = require("commander");
const { diffArrays } = require("./utils.js");
const fs = require("fs");
const config = require("../config.js");
const path = require("path");

const validateGeneratedArtifacts = async (project) => {
  const generatedProjectDirPath = path.join(
    process.cwd(),
    config.GENERATED_PROJECTS_DIR,
    project
  );
  const generatedArtifacts = await fs.readdirSync(generatedProjectDirPath);

  return new Promise((resolve, reject) => {
    const missingArtifacts = diffArrays(
      config.EXPECTED_GENERATED_ARTIFACTS[project],
      generatedArtifacts
    );
    if (missingArtifacts && missingArtifacts.length > 0) {
      reject(
        `Generated project (${project}) is missing one or more artifacts: ${missingArtifacts}`
      );
    } else {
      resolve(`Successfully validated generated artifacts for: ${project} `);
    }
  });
};

const main = async (opts) => {
  const { args } = opts;
  const [project] = args;
  if (opts.args.length !== 1) {
    console.log(program.helpInformation());
    process.exit(1);
  }

  try {
    console.log(await validateGeneratedArtifacts(project));
  } catch (err) {
    console.error(err);
  }
};

program.description(
  `Validate project generated by generator using the key <project-key>`
);

program.addArgument(
  new Argument("<project-key>", "project key").choices([
    "retail-app-demo",
    "retail-app-ext",
    "retail-app-no-ext",
  ])
);

program.parse(process.argv);

main(program);
